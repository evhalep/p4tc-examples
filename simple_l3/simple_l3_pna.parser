#!/bin/bash

# This is a sample demo script which creates a kParser instance named
# "parser1" for parsing bit offsets for five tuples of TCP-IP header,
# i.e. ipproto, ipv4 source address, ipv4 destination address, tcp source port,
# tcp destination port.

die()
{
	echo "error:$1"
	exit -1
}

IP="ip"
#md_off is (hdrfieldid - 1) * 2
headerid()
{
	echo $((($1 - 1)*2))
}


ipcmd() {
# -j -p enables formatted json print in stdout
	echo "Executing \`$IP -j -p $@\`" | fold -w 80
	$IP -j -p "$@" || die "command \`$@\` failed."
	echo "---------------------------------------------------------------"
}

#Lookup table creation for checking next nodes
ipcmd parser create table name table.ip
ipcmd parser create table name table.ether

#Extraction definition per header. Values (addoff local offsets)
ipcmd parser create metadata-rule name md.ipv4.ttl	\
		type bit-offset			   	\
		md-off $(headerid 1)			        \
		addoff 64

ipcmd parser create metadata-rule name md.ipv4.ipproto_offset	\
		type bit-offset			            \
		md-off $(headerid 2)			                \
		addoff 72

ipcmd parser create metadata-rule name md.ipv4.src_address_offset	\
		type bit-offset			                \
		addoff 96			                \
		md-off $(headerid 3)
ipcmd parser create metadata-rule name md.ipv4.dst_address_offset	\
		type bit-offset			         \
		addoff 128			         \
		md-off $(headerid 4)

ipcmd parser create metadata-rule name md.tcp.src_port	\
		type bit-offset			        \
		addoff 0		            \
		md-off $(headerid 5)

ipcmd parser create metadata-rule name md.tcp.dst_port	\
		type bit-offset			        \
		addoff 16		            \
		md-off $(headerid 6)

ipcmd parser create metadata-rule name md.ipv4.isValid	\
		type constant-halfword		      \
		md-off $(headerid 7)				\
		constantvalue 1

ipcmd parser create metadata-rule name md.tcp.isValid	\
		type constant-halfword		      \
		md-off $(headerid 8)				\
		constantvalue 1


# Creates a metalist object to be associated with a parse node. 
ipcmd parser create metalist name mdl.ipv4	\
		md.rule md.ipv4.dst_address_offset	\
		md.rule md.ipv4.src_address_offset	\
		md.rule md.ipv4.ttl              	\
		md.rule md.ipv4.ipproto_offset          \
		md.rule md.ipv4.isValid

ipcmd parser create metalist name mdl.tcp	\
		md.rule md.tcp.src_port			\
		md.rule md.tcp.dst_port			\
		md.rule md.tcp.isValid

# Creates a parse nodes. Contains header size and how to calculate next header
ipcmd parser create node name node.ether	\
		min-hdr-length 14		\
		nxt.field-off 12		\
		nxt.field-len 2			\
		nxt.table table.ether

ipcmd parser create node name node.ipv4		\
		min-hdr-length 20 		\
		nxt.field-off 9			\
		nxt.field-len 1			\
		nxt.table table.ip		\
		metalist mdl.ipv4

ipcmd parser create node name node.tcp	\
		min-hdr-length 20	\
		metalist mdl.tcp

# Populate lookup tables.
ipcmd parser create table/table.ether	\
		key 0x800		\
		node node.ipv4

ipcmd parser create table/table.ip	\
		key 0x6			\
		node node.tcp

# Creates a parser object and specifies starting node
ipcmd parser create parser name parser1 \
		metametasize 16			\
		rootnode node.ether
